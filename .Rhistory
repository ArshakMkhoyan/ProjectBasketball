kmeans.ani(total_points$total_points, 3)
library(readr)
project <- read_csv("~/Downloads/[10-17-2017]-[06-08-2018]-combined-stats.csv")
summary(project)
str(project)
#scater plot of 3point shots using coordinates
plot(project$original_x,project$original_y)
free_shot=project[project$event_type=='free throw',]
end_of_period= project%>%
group_by(game_id)%>%
filter(event_type=='end of period')
shot=project[project$event_type=='shot',]
pt3 = grepl(' 3PT ', project$description)
pt3 = project[pt3,]
plot(pt3$original_x,pt3$original_y)
plot(pt3$converted_x,pt3$converted_y)
range(na.omit(project$converted_x))
range(na.omit(project$converted_y))
# 50 feet for x coordinate, 94 for y one
range(na.omit(project$original_x))
range(na.omit(project$original_y))
#turnover types frequencies
table(project[project$event_type=='turnover',]$event_type, project[project$event_type=='turnover',]$type)
ggplot(project[project$event_type=='turnover',], aes(x=type))+geom_bar()+ggtitle('turnover types frequencies')+coord_flip()
total_points=project%>%
group_by(player, team)%>%
summarise(total_points=sum(na.omit(points)))%>%
arrange(desc(total_points))
#Regressions of final result using the outcome of first, second, and thitd quaters
#Substitutions
subs=filter(project,event_type=='sub')
teams_subs=project%>%
filter(event_type=='sub')%>%
group_by(remaining_time)%>%
filter(play_id==max(play_id))
#plots
shot=project[project$event_type=='shot',]
courtplot <- function(feat) {
feat <- substitute(feat)
shot %>%
ggplot(aes(x = converted_x, y = converted_y)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
scale_color_brewer(palette = "Set1") +
theme_void() +
ggtitle(paste(feat))
}
courtplot(shot$type)
#Distance affecting the shot
all_shots_miss=filter(project, event_type=='miss'|event_type=='shot')
all_shots_miss$distance_bins <- cut(all_shots_miss$shot_distance, breaks = 10)
all_shots_miss$event_type=as.factor(all_shots_miss$event_type)
#The difference is in +geom_bar()
ggplot(data = all_shots_miss, aes(x = distance_bins)) + geom_bar() + ggtitle("Shot Distribution by distance") +
theme(axis.text.x = element_blank())
#Shots miss and made for each distance range
ggplot(data = all_shots_miss, aes(x = distance_bins))+geom_bar(aes(fill = event_type), stat = "count", position = "fill") + ggtitle("Shot Distribution") +
theme(axis.text.x = element_blank())
#Accuracy of the shot type
prob=prop.table(table(all_shots_miss$type, all_shots_miss$event_type),1)
prob=as.data.frame.matrix(prob)
prob$type=rownames(prob)
ggplot(prob, aes(x = reorder(type, shot), y = 1)) +
geom_point(aes(y = shot), size = 3, color = " dark blue", stat = "identity") +
coord_flip() +
labs(y = "Accuracy", x = "", title = "Accuracy by Shot_type")
all_shots_miss$time_bins <- cut(as.numeric(all_shots_miss$remaining_time), breaks = 12)
ggplot(data = all_shots_miss, aes(x = time_bins))+geom_bar(aes(fill = event_type), stat = "count", position = "fill") +
theme(axis.text.x = element_blank())+ggtitle("Accuracy of shot by time remaining")
ggplot(data = all_shots_miss, aes(x = time_bins)) + geom_bar()+theme(axis.text.x = element_blank())
nm=all_shots_miss%>%
group_by(shot_bins)%>%
summarise(number=n())
for (i in 1:length(nm$shot_bins)){
all_shots_miss$number_shots[all_shots_miss$shot_bins==nm$shot_bins[i]]=nm$number[i]
}
#Regression of final result
end_of_period= project%>%
group_by(game_id)%>%
filter(event_type=='end of period')%>%
mutate(Mod.Diff.H.A=abs(home_score-away_score))
first_period=end_of_period%>%
filter(period==1)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
last_period=end_of_period%>%
filter(period==4)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
table(first_period$result,last_period$result)
#difference 10
first_period10=end_of_period%>%
filter(period==1, Mod.Diff.H.A>=10)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
last_period10=end_of_period[-3:-1,][end_of_period$period==1& end_of_period$Mod.Diff.H.A>=10,]%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
table(first_period10$result,last_period10$result)
kmeans.ani(total_points$total_points, 3)
project <- read_csv("/Data/[10-17-2017]-[06-08-2018]-combined-stats.csv")
project <- read_csv("Data/[10-17-2017]-[06-08-2018]-combined-stats.csv")
summary(project)
str(project)
#scater plot of 3point shots using coordinates
plot(project$original_x,project$original_y)
free_shot=project[project$event_type=='free throw',]
end_of_period= project%>%
group_by(game_id)%>%
filter(event_type=='end of period')
library(dplyr)
end_of_period= project%>%
group_by(game_id)%>%
filter(event_type=='end of period')
shot=project[project$event_type=='shot',]
pt3 = grepl(' 3PT ', project$description)
pt3 = project[pt3,]
plot(pt3$original_x,pt3$original_y)
plot(pt3$converted_x,pt3$converted_y)
range(na.omit(project$converted_x))
range(na.omit(project$converted_y))
range(na.omit(project$original_x))
range(na.omit(project$original_y))
#turnover types frequencies
table(project[project$event_type=='turnover',]$event_type, project[project$event_type=='turnover',]$type)
ggplot(project[project$event_type=='turnover',], aes(x=type))+geom_bar()+ggtitle('turnover types frequencies')+coord_flip()
total_points=project%>%
group_by(player, team)%>%
summarise(total_points=sum(na.omit(points)))%>%
arrange(desc(total_points))
#Substitutions
subs=filter(project,event_type=='sub')
teams_subs=project%>%
filter(event_type=='sub')%>%
group_by(remaining_time)%>%
filter(play_id==max(play_id))
#plots
shot=project[project$event_type=='shot',]
courtplot <- function(feat) {
feat <- substitute(feat)
shot %>%
ggplot(aes(x = converted_x, y = converted_y)) +
geom_point(aes_q(color = feat), alpha = 0.7, size = 3) +
scale_color_brewer(palette = "Set1") +
theme_void() +
ggtitle(paste(feat))
}
courtplot(shot$type)
#Distance affecting the shot
all_shots_miss=filter(project, event_type=='miss'|event_type=='shot')
all_shots_miss$distance_bins <- cut(all_shots_miss$shot_distance, breaks = 10)
all_shots_miss$event_type=as.factor(all_shots_miss$event_type)
#The difference is in +geom_bar()
ggplot(data = all_shots_miss, aes(x = distance_bins)) + geom_bar() + ggtitle("Shot Distribution by distance") +
theme(axis.text.x = element_blank())
#Shots miss and made for each distance range
ggplot(data = all_shots_miss, aes(x = distance_bins))+geom_bar(aes(fill = event_type), stat = "count", position = "fill") + ggtitle("Shot Distribution") +
theme(axis.text.x = element_blank())
#Accuracy of the shot type
prob=prop.table(table(all_shots_miss$type, all_shots_miss$event_type),1)
prob=as.data.frame.matrix(prob)
prob$type=rownames(prob)
ggplot(prob, aes(x = reorder(type, shot), y = 1)) +
geom_point(aes(y = shot), size = 3, color = " dark blue", stat = "identity") +
coord_flip() +
labs(y = "Accuracy", x = "", title = "Accuracy by Shot_type")
all_shots_miss$time_bins <- cut(as.numeric(all_shots_miss$remaining_time), breaks = 12)
ggplot(data = all_shots_miss, aes(x = time_bins))+geom_bar(aes(fill = event_type), stat = "count", position = "fill") +
theme(axis.text.x = element_blank())+ggtitle("Accuracy of shot by time remaining")
ggplot(data = all_shots_miss, aes(x = time_bins)) + geom_bar()+theme(axis.text.x = element_blank())
nm=all_shots_miss%>%
group_by(shot_bins)%>%
summarise(number=n())
for (i in 1:length(nm$shot_bins)){
all_shots_miss$number_shots[all_shots_miss$shot_bins==nm$shot_bins[i]]=nm$number[i]
}
end_of_period= project%>%
group_by(game_id)%>%
filter(event_type=='end of period')%>%
mutate(Mod.Diff.H.A=abs(home_score-away_score))
first_period=end_of_period%>%
filter(period==1)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
last_period=end_of_period%>%
filter(period==4)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
table(first_period$result,last_period$result)
#difference 10
first_period10=end_of_period%>%
filter(period==1, Mod.Diff.H.A>=10)%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
last_period10=end_of_period[-3:-1,][end_of_period$period==1& end_of_period$Mod.Diff.H.A>=10,]%>%
mutate(result=ifelse(home_score>away_score,'home',ifelse(away_score>home_score,'away','draw')))%>%
select(result)
load("~/Desktop/Data_science/R/Sports Analitics/Project Basketball/bxsum2.rda")
View(bxsum2)
load("~/Desktop/Data_science/R/Sports Analitics/Project Basketball/end_period_noDraws.Rda")
View(end_period_noDraws)
library(shiny); runApp('Shiny App/Code Shiny App Baketball.R')
runApp('Baskettball')
runApp('Baskettball')
knitr::opts_chunk$set(echo = FALSE)
library(lubridate)
library(stringr)
library(tidyr)
library(shiny)
library(dplyr)
library(ggplot2)
load("bxsum2.rda")
end_period=data_frame()
for (i in 1:14597){
ss <- bxsum2[[i]]$resultSets$rowSet[[6]]
colnames(ss) <- bxsum2[[i]]$resultSets$headers[[6]]
#creating cumulative point
points=t(ss[,9:12])
colnames(points)=c('Home.Points', 'Away.Points')
points=as.data.frame(points)
points$Period.Diff=as.numeric(as.character(points[,1]))-as.numeric(as.character(points[,2]))
points[,1]=as.numeric(as.character(points[,1]))
points[,2]=as.numeric(as.character(points[,2]))
for (k in 4:2){
for (z in 1:2){
points[k,z]=sum(points[1:k,z])
}
}
points$Period=c(1:4)
#Add game id
game_id=data_frame(game.id=rep(as.character(ss[,3]), times=2))
#Teams names
team_names=data_frame(home=rep(as.character(ss[1,5]), times=4),away=rep(as.character(ss[2,5]), times=4))
#Year added
year_game=data.frame(year=rep(ss[1,1]%>%ymd_hms()%>%year(), times=4))
#binding all frames
full_data=bind_cols(game_id,year_game, team_names, points)
end_period=bind_rows(end_period,full_data)
}
end_period=mutate(end_period, Diff.Points=abs(Away.Points-Home.Points))%>%
select(game.id:away, Period, Home.Points:Diff.Points)%>%
mutate(result=ifelse(Home.Points>Away.Points,'home',ifelse(Away.Points>Home.Points,'away','draw')))
#Just to make sure we structured home and away teams' names right, we get their names and game ids from a different place and mach them with the ones we created above.
final=data_frame()
for (i in c(2005:2017)){
df <- SportsAnalytics270::getBoxScore(i)
df$GAME_ID <- as.character(df$GAME_ID)
df$H <-ifelse(str_detect(df$MATCHUP, '@')==TRUE, 'A', 'H')
df=df%>% select(GAME_ID, TEAM_ABBREVIATION, H)%>%spread(H, TEAM_ABBREVIATION)
final=bind_rows(final, df)
}
a=left_join(end_period, final, by=c("game.id"="GAME_ID"))
same=identical(a$home,a$H)
#It appeared they are the same!!!
#Taking games that had draw in 4th period out.
end_period_noDraws_id=end_period%>%filter(Period==4, result=='draw')%>%select(game.id)
end_period_noDraws=anti_join(end_period, end_period_noDraws_id, by='game.id')
glimpse(end_period_noDraws)
#Point difference, to use for further calculation
end_period_noDraws%>%filter(Period!=4)%>%
ggplot(aes(Diff.Points))+geom_histogram()+facet_grid(~Period)+ylab('Number of games')+xlab('Point Difference')+ggtitle('Distribution of points diffrences for the given period')
end_period_noDraws%>%filter(Period==4)%>%
ggplot(aes(result))+geom_bar()+facet_grid(~Period)+ylab('Number of games')+xlab('')+ggtitle('Games won by two teams')
ggplot(end_period_noDraws, aes(Period.Diff))+geom_bar()+facet_grid(~Period)+ylab('Number of games')+xlab('Point Differece')+ggtitle('Distribution of games for 4 periods')
sd1=end_period_noDraws%>%filter(Period==1)%>%select(Period.Diff)%>%unlist()%>%sd()
sd2=end_period_noDraws%>%filter(Period==2)%>%select(Period.Diff)%>%unlist()%>%sd()
sd3=end_period_noDraws%>%filter(Period==3)%>%select(Period.Diff)%>%unlist()%>%sd()
sd4=end_period_noDraws%>%filter(Period==4)%>%select(Period.Diff)%>%unlist()%>%sd()
find_prob1=function (dif, period, team){
game_id1=end_period_noDraws%>%
filter(Period==period, Diff.Points==dif)%>%
select(game.id)
first_period10=end_period_noDraws%>%
filter(Period==period, Diff.Points==dif)%>%
select(result)
last_period10=semi_join(end_period_noDraws, game_id1, by='game.id')%>%
filter(Period==4)%>%
select(result)
result_table10=as.matrix(table(first_period10$result,last_period10$result))
prob_total=(result_table10['away','away']+result_table10['home','home'])/sum(result_table10)
prob_home=result_table10['home','home']/sum(first_period10$result=='home')
prob_away=result_table10['away','away']/sum(first_period10$result=='away')
if (tolower(team)=='home') {
prob_home
} else {
prob_away
}
}
df_prob1=data.frame(period=c(1:120), difference=c(1:120), team=c(1:120), probability=c(1:120))
for (i in 1:3){
for (k in 1:20){
for(ha in c('home', 'away')){
tm=ha=='home'
df_prob1$period[(i-1)*40+2*k-tm]=i
df_prob1$difference[(i-1)*40+2*k-tm]=k
df_prob1$team[(i-1)*40+2*k-tm]=ha
df_prob1$probability[(i-1)*40+2*k-tm]=find_prob1(k, i,ha)
}
}
}
ggplot(df_prob1, aes(difference, probability, color= team))+geom_point()+geom_line()+facet_grid(~period)+ylab('Probability')+xlab('Differences')+ggtitle('Plot of Probabilities for 3 periods')+geom_smooth(se=F)
ggplot(filter(df_prob1, period==3), aes(difference, probability, color= team))+geom_point()+ geom_line()+ylab('Probability') +xlab('Differences')+ggtitle('Plot of Probabilities for 3rd period')+geom_smooth(se=F)
home=c()
away=c()
for (h in c('home', 'away')){
for( i in 1:3){
for_lm=df_prob1%>%filter(period==i, team==h)
a=lm(probability~difference, data=for_lm)
if(h=='home'){
home=c(home,coefficients(a)[2])}
else {
away=c(away, coefficients(a)[2])}
}
}
df_lm=data_frame(Team=c(rep('home', 3), rep('away',3)), Period=c(1:3,1:3), Coefficient=c(home, away))
ggplot(df_lm, aes(x=Period, y=Coefficient, color=Team))+geom_point()+geom_line()+scale_x_discrete(limits=c("1","2","3"))+ggtitle('Coeficients from regressing probabilities on point difference')
View(full_data)
View(final)
View(end_period_noDraws_id)
View(end_period)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
